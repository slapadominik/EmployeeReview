// <auto-generated />
using System;
using EmployeeReview.Domain.Common.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeReview.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobTitle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Młodszy programista .NET"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programista .NET"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Starszy programista .NET"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Młodszy programista SQL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Programista SQL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Starszy programista SQL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Scrum Master"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Senior Scrum Master"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Młodszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tester oprogramowania"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Architekt oprogramowania"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Architekt baz danych"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Kierownik testerów"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kierownik zespołów programistycznych"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<byte>("Rate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("585395a8-663e-4ff2-bd09-8c756b2d9a59"),
                            Email = "admin@gmail.com",
                            FirstName = "Dominik",
                            LastName = "Słapa",
                            Password = new byte[] { 170, 250, 107, 184, 207, 20, 137, 118, 8, 184, 66, 132, 71, 124, 221, 136, 219, 76, 193, 190, 157, 220, 179, 153, 118, 52, 119, 125, 173, 148, 93, 186, 225, 51, 236, 163, 37, 141, 40, 88, 29, 47, 160, 79, 119, 173, 155, 99, 49, 207, 228, 165, 78, 242, 21, 240, 106, 81, 132, 136, 245, 153, 215, 240 },
                            PasswordSalt = new byte[] { 75, 251, 30, 150, 228, 18, 1, 141, 224, 225, 234, 210, 173, 168, 43, 31, 24, 167, 22, 80, 164, 1, 212, 175, 211, 150, 102, 174, 99, 151, 41, 162, 240, 31, 128, 160, 226, 247, 140, 193, 241, 107, 242, 35, 190, 106, 47, 43, 103, 218, 208, 72, 244, 163, 133, 218, 83, 109, 209, 89, 40, 64, 32, 21, 195, 227, 212, 214, 136, 175, 25, 41, 83, 186, 119, 197, 50, 45, 32, 237, 96, 73, 121, 30, 87, 119, 206, 146, 127, 33, 10, 162, 143, 94, 50, 219, 218, 20, 54, 22, 162, 244, 96, 225, 172, 134, 63, 174, 227, 192, 29, 170, 203, 184, 18, 100, 68, 110, 65, 226, 14, 12, 67, 143, 102, 54, 226, 10 },
                            Sex = "M",
                            TitleId = 16
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("585395a8-663e-4ff2-bd09-8c756b2d9a59"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "Author")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("AuthorId");

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
