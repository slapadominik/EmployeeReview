// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeReview.Domain.Common.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190501160633_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobTitle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Młodszy programista .NET"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programista .NET"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Starszy programista .NET"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Młodszy programista SQL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Programista SQL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Starszy programista SQL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Scrum Master"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Senior Scrum Master"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Młodszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tester oprogramowania"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Architekt oprogramowania"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Architekt baz danych"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Kierownik testerów"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kierownik zespołów programistycznych"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<byte>("Rate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<int>("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("TitleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a0b337f8-ba69-4b2f-9c91-66eb27c29bd0"),
                            Email = "admin@gmail.com",
                            FirstName = "Dominik",
                            LastName = "Słapa",
                            Password = new byte[] { 137, 51, 54, 83, 59, 91, 126, 205, 96, 202, 97, 74, 135, 98, 154, 249, 197, 162, 215, 6, 44, 32, 242, 140, 43, 70, 227, 141, 38, 60, 228, 191, 104, 179, 241, 102, 156, 28, 173, 99, 3, 134, 176, 199, 121, 194, 155, 71, 15, 126, 137, 117, 176, 120, 208, 125, 30, 143, 12, 134, 125, 94, 171, 45 },
                            PasswordSalt = new byte[] { 206, 146, 217, 32, 193, 206, 172, 83, 48, 157, 140, 102, 116, 97, 45, 81, 89, 67, 148, 126, 111, 140, 255, 83, 176, 130, 211, 10, 200, 64, 182, 136, 208, 161, 71, 149, 194, 62, 97, 231, 20, 16, 78, 203, 247, 127, 62, 102, 148, 107, 238, 132, 36, 134, 194, 104, 124, 126, 173, 100, 141, 226, 193, 89, 20, 31, 86, 196, 236, 98, 221, 101, 244, 194, 10, 225, 183, 177, 140, 60, 56, 0, 183, 35, 158, 91, 225, 176, 205, 168, 7, 196, 225, 172, 252, 180, 42, 225, 99, 231, 73, 213, 191, 237, 119, 226, 135, 40, 59, 210, 221, 237, 113, 108, 64, 199, 213, 211, 53, 72, 0, 254, 12, 72, 7, 20, 24, 88 },
                            Sex = "M",
                            TitleId = 16
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("a0b337f8-ba69-4b2f-9c91-66eb27c29bd0"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
