// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EmployeeReview.Domain.Common.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190515193745_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("JobTitle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Młodszy programista .NET"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Programista .NET"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Starszy programista .NET"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Młodszy programista SQL"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Programista SQL"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Starszy programista SQL"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Scrum Master"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Senior Scrum Master"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Młodszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Tester oprogramowania"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Starszy tester oprogramowania"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Architekt oprogramowania"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Architekt baz danych"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Kierownik testerów"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Kierownik zespołów programistycznych"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("AuthorId");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("Created");

                    b.Property<byte>("Rate");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Supervisor"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Employee"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.TeamDAO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Team");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Testerzy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "IT-300"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gwiezdna Flota"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delta Force"
                        },
                        new
                        {
                            Id = 5,
                            Name = "RR"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Angry Nerds"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Nitro"
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("Password")
                        .IsRequired();

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)));

                    b.Property<Guid?>("SupervisorId");

                    b.Property<int>("TitleId");

                    b.HasKey("Id");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("TitleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5044dad1-e57b-4431-9367-59c7ce98d014"),
                            Email = "admin@gmail.com",
                            FirstName = "Dominik",
                            LastName = "Słapa",
                            Password = new byte[] { 156, 56, 196, 64, 234, 151, 240, 23, 217, 233, 43, 29, 114, 129, 45, 96, 200, 187, 122, 182, 14, 19, 58, 65, 212, 228, 242, 239, 115, 167, 121, 111, 180, 254, 20, 69, 164, 18, 94, 113, 57, 146, 182, 58, 97, 242, 89, 68, 215, 221, 40, 62, 169, 64, 188, 162, 152, 58, 128, 151, 211, 28, 125, 114 },
                            PasswordSalt = new byte[] { 4, 159, 41, 147, 23, 251, 112, 94, 22, 234, 239, 161, 173, 234, 215, 236, 142, 61, 198, 17, 198, 80, 64, 72, 207, 64, 6, 107, 13, 251, 100, 36, 215, 189, 98, 195, 250, 133, 56, 30, 102, 102, 96, 49, 243, 79, 121, 23, 165, 136, 82, 143, 107, 208, 134, 177, 204, 116, 196, 196, 38, 204, 184, 220, 124, 12, 8, 56, 199, 36, 12, 217, 146, 211, 65, 154, 187, 125, 202, 14, 212, 196, 230, 2, 129, 102, 80, 71, 189, 208, 76, 249, 166, 227, 72, 206, 252, 176, 99, 55, 28, 152, 0, 42, 240, 115, 79, 122, 87, 245, 195, 250, 118, 33, 38, 124, 43, 9, 244, 207, 121, 237, 30, 107, 141, 184, 127, 46 },
                            Sex = "M",
                            TitleId = 16
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("5044dad1-e57b-4431-9367-59c7ce98d014"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserTeamDAO", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UserTeam");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.ReviewDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "Author")
                        .WithMany("ReviewsGiven")
                        .HasForeignKey("AuthorId");

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("ReviewsReceived")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.JobTitleDAO", "Title")
                        .WithMany("Users")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserRoleDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.RoleDAO", "Role")
                        .WithMany("UserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EmployeeReview.Domain.Common.Persistence.DAO.UserTeamDAO", b =>
                {
                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.TeamDAO", "Team")
                        .WithMany("UserTeam")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EmployeeReview.Domain.Common.Persistence.DAO.UserDAO", "User")
                        .WithMany("UserTeam")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
